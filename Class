/*	-WHAT IS THIS?-
	This file adds optional material to "MPMB's Character Record Sheet" found at https://flapkan.com/mpmb/charsheets
	Import this file using the "Add Extra Materials" bookmark.
	-KEEP IN MIND-
	It is recommended to enter the code in a fresh sheet before adding any other information (i.e. before making your character with it).
*/

/*	-INFORMATION-
	Subject:	Class
	Effect:		This script adds a class, called "Oracle" and its 4 subclasses
				This class has been made and published by reddit's /u/laserllama.
				For more information, see here: https://dm-clockwork-dragon.tumblr.com/PublishedWork
			
	Code by:	Travis Hastings
	Date:		19-7-2024 (sheet v13.1.4)

	If you like this class, take a look at other content of this creator:
	https://dm-clockwork-dragon.tumblr.com/PublishedWork
	I'm a little concerned that the code grammar may not be correct and that some of the descriptions have too many words per line. 
*/

var iFileName = "Oracle [Clockwork Dragon’s Published Work, transcribed by Travis Hastings].js"; // Optional; This is how the file will be named in the sheet if you import it as a file and not copy-paste its content. Only the first occurrence of this variable will be used.

RequiredSheetVersion(13); // Optional; This is the minimum required version number of the sheet for the script to work. If the sheet being used to import the script is of an earlier version, the user will be warned

SourceList["HB:CDPW-O"] = {
	name : "Oracle",
	abbreviation : "HB:CDPW-O",
	group : "Clockwork Dragon’s Published Work, Oracle",
	url : "https://dm-clockwork-dragon.tumblr.com/PublishedWork",
	date : "19-7-2024"
};

ClassList["oracle"] = { //Object name; Note the use of only lower case! Also note the absence of the word "var" and the use of brackets []

	regExpSearch : /oracle/i, //required;

	name : "Oracle", //required; the name to use for the class

	source : ["HB:CDPW-O", 0], //required; the source and the page number. "HB" stands for homebrew. See the "Complete SourceList" for an overview of sources that are already defined. Or define a new source using the "Homebrew Syntax - SourceList.js". // This can be an array of arrays to indicate the things appears in multiple sources. For example, if something appears on page 7 of the Elemental Evil Player's Companion and on page 115 of the Sword Coast Adventure Guide, use the following: [["E", 7], ["S", 115]]

	primaryAbility : "Wisdom", //required; the text to display when citing the primary ability of the class

	prereqs : "Wisdom 13", //required; the text to display when citing the prerequisite for the class when multiclassing

	die : 6, //required; the type of hit die the class has (i.e. 10 means d10)

	improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5],

	saves : ["Cha", "Wis"], //required; the two save proficiencies.

	skillstxt : { //required; the text to display for skill proficiencies.
		primary : "Choose two from Arcana, History, Religion,Insight, Investigation, Medicine, Nature, Perception,Performance, Persuasion, Slight of Hand, Stealth, Survival",
		secondary : "Choose one from Arcana, History, Religion,Insight, Investigation, Medicine, Nature, Perception,Performance, Persuasion, Slight of Hand, Stealth, Survival"
	},
	toolProfs : {// optional; this is an object with arrays with the tool proficiencies gained. Each entry in an array can be its own array of 2 entries. The first entry is the name of the tool and the second entry is either 1) a number if the tool is yet to be chosen, or 2) the 3-letter ability score abbreviation if the tool is to be listed in the skill section and have a bonus calculated
		primary : [["Artisan's tools", 1]], // optional; the tool proficiencies gained if the class is the primary class (i.e. taken at 1st level)
		secondary : [["Artisan's tools", 1]] // optional; the tool proficiencies gained if the class is not the primary class (i.e. taken at a later level)
	},
	armorProfs : { //required; the 4 entries are for: ["light", "medium", "heavy", "shields"]
		primary : [true, false, false, false],
		secondary : [true, false, false, false]
	},
	weaponProfs : {
		primary : [true, false, ["hand crossbow", "shortsword"]], //required; the weapon proficiencies if this is the first or only class
		secondary : [true, false, []], //required; the weapon proficiencies if this class is multiclassed with (so not taken at level 1, but later)
	},
	equipment : "Oracle starting equipment:" +
		"\n \u2022 simple weapons of your choice -or- a light crossbow and 20 bolts;" +
  		"\n \u2022light crossbow and 20 bolts -or- two daggers;" +
		"\n \u2022one set of artisan's tools of your choice;" +
        "\n \u2022 explorers pack -or- scholar's pack;" + //required; the text to display when citing the starting equipment
          "\n \u2022leather armor;" + //required; the text to display when citing the starting equipment
		"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",

	subclasses : ["Karmic Destiny", []], 
	// options: ["Destiny of the Unhindered", "Destiny of the Charitable", "Destiny of the Wilful", "Destiny of the Guardian"]], 
	//required; the names of the subclasses. The first entry is the overall name that is given to the subclasses, the second entry is a list of the subclass, using the exact names of the entry of the subclasses in the ClassSubList. //Note that if one of the entries in the array of subclasses doesn't exist in the ClassSubList, the sheet will throw an error as soon as you make a character with levels in this class
	//IMPORTANT: for any subclass you add using the AddSubClass() function, don't list them here! The AddSubClass() function makes its own entry in this array! If you have entries here that don't exist (because you didn't add any ClassSubList entry, or added it using the AddSubClass() function, then the sheet will throw strange errors)!

	attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], //required; the amount of attacks at each level. Note that there are 20 entries, one for each level.

	features : { //required;  the class features.

		"karma" : { //note the use of lower case characters
		
			name : "karma", //required; the name of the class feature
			source : ["HB:CDPW-O", 4], //required; the source of the class feature
			minlevel : 1, //required; the level at which the feature is gained
			description : desc([
				"As a Oracle, you excel at manipulating the hands of destiny,
         and using fate as your weapon, but doing so requires drawing
         on your own Karma to maintain the balance.",
				"Beginning at first level, Each time you use the
         Help action to aid another creature, you gain a point of
         Karma, which you may spend karma to influence fate in
         a number of ways:",
				"Read Fortune: As a reaction when an ally within 30 ft of you takes
         an action that requires rolling a d20, you may spend 1
         Karma to replace the triggering roll with a draw from
         your deck. You may do so after the roll has been made,
         but before the result of the action is decided.",
				"Reversal: You may spend 2 Karma as a bonus action to change the
         orientation of a card within your Court.",
				"Dismissal: As you may spend 2 Karma to discard a card from your
         Court, activating it’s Dismissal Effect, the type of action
         required to dismiss a card is determined by the card
         being dismissed.",
				"The maximum amount of karma that you can have
         accrued at once is shown on the Oracle table. Each time
         you complete an extended rest, your accrued Karma
        resets to an amount equal to your proficiency bonus."
            ]), //required; the text to put in the "Class Features" field
			action : ["bonus action", ""],
			calcChanges : {
				// **note** It feels like there's a formula missing here but I'm not sure what it is or if even these old formulas are correct
				atkAdd : [
					function (fields, v) {
						if (classes.known.savant && classes.known.savant.level && !v.isSpell && !v.isDC) {
							fields.Description += (fields.Description ? '; ' : '') + 'Androit Analysis: can use Int vs. marked target';
						};
					},
				]
			}
		},
	"karmic spellcasting" : { //note the use of lower case characters
		
			name : "karmic spellcasting", //required; the name of the class feature
			source : ["HB:CDPW-O", 4], //required; the source of the class feature
			minlevel : 1, //required; the level at which the feature is gained
			description : desc([
				"By using your Karma to manipulate the hands of fate,
         you are capable of casting spells from the Oracle Spell
         List located at the end of this class description. See
         Spells Rules for the general rules of spellcasting.",
				"Cantrips: You know two cantrips of your choice from the Oracle
         spell list. Each time you complete a long rest, you may
         choose one of the Oracle cantrips you know, and replace
         it with another cantrip form the Oracle spell list.",
				"Karmic Casting: You are capable of harnessing your Karma in order to
         cast spells. The Karmic Spellcasting table shows the
         cost of casting a spell of a given level. To cast a spell at a
         higher level, you expend additional karma as if the spell
         were the level you are casting it at. You can only use
         Karma to cast Oracle Spells. The Oracle table shows
         what the maximum level you may cast a spell at is.",
				"You prepare the list of Oracle Spells that are available
         for you to cast, choosing from the oracle spell list. When
        you do so, choose a number of Oracle Spells equal to
        your Wisdom modifier + your oracle level (minimum
        of one spell). The Spells must be of a level equal to or
        lower than your spell level, as show on the Oracle Table.
        Casting the spell doesn’t remove it from your list of
        prepared Spells.
        You can also change your list of prepared Spells when
        you finish a Long Rest. Preparing a new list of Oracle
        Spells requires time spent in prayer and meditation: at
        least 1 minute per Spell Level for each spell on your list.",
				"Spellcasting Ability: Wisdom is your spellcasting ability for your Oracle
         spells, so you use your Wisdom whenever a spell refers
         to your spellcasting ability. In addition, you use your
         Wisdom modifier when setting the saving throw DC for
         an Oracle spell you cast and when making an attack roll
         with one.",
				"Ritual Casting:You can cast an oracle spell as a ritual without
         expending karma if that spell has the ritual tag and you
         have the spell prepared.",
         "Spellcasting Focus: You may use a scrying implement, such as a Crystal Ball
        or a set of Tarot Cards as your spellcasting focus when
        casting spells.
            ]), //required; the text to put in the "Class Features" field
			action : ["bonus action", ""],
			calcChanges : {
				// **note** It feels like there's a formula missing here but I'm not sure what it is or if even these old formulas are correct
				atkAdd : [
					function (fields, v) {
						if (classes.known.savant && classes.known.savant.level && !v.isSpell && !v.isDC) {
							fields.Description += (fields.Description ? '; ' : '') + 'Androit Analysis: can use Int vs. marked target';
						};
					},
				]
			}
		},

		"oracle’s insight" : {
			name : "Oracle’s Insight",
			source : ["HB:CDPW-O", 5],
			minlevel : 2,
			description : desc([
				"Beginning at 2nd level, your connection to fate allows
         you to see into the hearts of men, and predict their
         actions. You gain proficiency in the Insight skill, if you
         do not already have it. If you are already proficient
         in this skill, you may instead double your proficiency
         bonus when making insight checks.",
				"As an action on your turn, you may spend 1 karma to
         force a target within 30 ft to make a wisdom saving
         throw contested by your Insight. On a failure, the target
         has disadvantage on attacks made against you or allies
         within 30 ft of you until the end of it’s next turn."
            ]),
		},

		"foretelling" : {
			name : "Foretelling",
			source : ["HB:CDPW-O", 5],
			minlevel : 1,
			description : desc([
       "Also beginning at 2nd level, your alignment with fate
       allows you glimpses into the future. When you finish
       a long rest, Draw a number of cards equal to your
       proficiency bonus and set them aside. You can replace
       any draw from your deck with one of these foretelling
       cards. You must choose to do so before the draw, and
       you can replace a draw in this way only once per turn.",
			 "Each foretelling card can be used only once, after which
       it is shuffled back into your deck. When you finish a long
       rest, you lose any unused foretelling cards." 

			  
	
		
		"subclassfeature3" : { //You need at least one entry named "subclassfeatureX". It signals the sheet to ask the user for which subclass he would like to have. The level of this feature should match the level the class needs to select a subclass. Once a subclass is selected, any feature with "subclassfeature" in the object name in the class entry will be ignored.
			name : "Karmic Destiny",
			source : ["HB:CDPW-O", 5],
			minlevel : 3,
			description : "\n   " + "Choose your Karmic Destiny and put it in the \"Class\" field" + "\n   " + "Choose between Destiny of the Unhindered, Destiny of the Charitable, Destiny of the Wilful, Destiny of the Guardian.",
		},

		"guiding vision" : {
			name : "Guiding Vision",
			source : ["HB:CDPW-O", 5],
			minlevel : 5,
			description : desc([
				"Starting at 5th level, you are capable of helping others
        move along the path of their own fate. You may use the
        Help action as a bonus action. Additionally, when you
        use the Help action to aid an ally in attacking a creature,
        the target of that attack can be within 30 feet of you,
        rather than 5 feet of you, if the target can see or hear
        you."

			]),
          

		"karmic alignment":{
            name:"Karmic Alignment",
			source : ["HB:CDPW-O", 5],
			minlevel : 7,
            description : desc([
				"By level 7, you have begun to naturally move in line
         with the flow of your own destiny, allowing your Karma
         to grow. Whenever you draw a King, Queen, Knight, or
         Page who’s suit matches your own, you gain 1 karma."
			
        },
		
		"synchronicity" : {
			name : "Synchronicity",
			source : ["HB:CDPW-O", 5],
			minlevel : 9,
			description : desc([
				"Starting at 9th level, you know how to direct your allies
        into perfect alignment with their destiny. When you take
        the Help action to aid an ally in making an ability check
        or attack roll, they treat any result lower than your spell
        attack modifier as equal to your spell attack modifier."
				
			])
		},

		"prescience":{
            name:"Prescience",
			source : ["HB:CDPW-O", 5],
			minlevel : 10,
            description : desc([
				"Beginning at 10th level, your tie to the weave of fate
        allows you to predict misfortune before it arrives. You
        are immune to the Surprised condition, and hidden
        creatures or attackers do not have advantage on attack
        rolls made against you."
		
				]),
	
		},

		"greater insight":{
            name:"Greater insight",
			source : ["HB:CDPW-O", 5],
			minlevel : 13,
            description : desc([
				"By 13th level, your ability to read the hearts and minds
        of those around you is unmatched. When a creature
        fails a wisdom save against your Oracle’s Insight ability,
        it suffers disadvantage on saving throws against spells
        and effects caused by you or allies within 30 ft of you
        until the end of it’s next turn.",
				"In addition, you and allies within 30 ft of you have
        advantage on attack rolls made against the target until
        the end of your next turn.."
                ]),
			
        },

		"karmic understanding":{
            name:"Karmic Understanding",
			source : ["HB:CDPW-O", 5],
			minlevel : 14,
            description : desc([
				"By level 14, you Following the course of your destiny
        comes as naturally as breathing, granting you additional
        karma. Whenever you draw any card whose suit
        matches your Karmic Destiny, you gain 1 karma."
				
                ]),
        
        },

		"warp in the weave":{
            name:"Warp in the Weave",
			source : ["HB:CDPW-O", 5],
			minlevel : 18,
            description : desc([
				"Beginning at 18th level, you have learned to weave the
strands of fate to protect yourself an others from certain
area effects, such as an ancient red dragon’s fiery breath
or an ice storm spell. When you or an ally that you can
see is subjected to an effect that allows the target to
make a Dexterity saving throw to take only half damage,
you may spend 2 Karma as a reaction to cause the
target to instead take no damage on a success, or only
half damage on a failure."
				
                ])
        },

		"omniscience":{
            name:"Omniscience",
			source : ["HB:CDPW-O", 5],
			minlevel : 20,
            description : desc([
                "By the time you reach level 20, you have become so
                closely entwined with the strands of fate that the world
                can withhold no mysteries form your gaze. You gain
                truesight out to a range of 60 ft, and no longer require
                line of sight to cast spells."
				])
		
};

// **note** The two subclasses currently here were written up by hohouy, whom I've used their original work to update this sheet with. I'm sure there's some stuff that's missing in addition to the things that need to be updated. I have not had a chance to double check the work yet. Everything before this line is my best guess at how things should go but I'm open to suggestions on how to improve them. Anything below here will be checked later. The subclass I am truly interested in having checked is the "Physician" as I am starting a campaign in the next few days and want to make sure that, if nothing else, it is correct and will work. I will get the rest of the other subclasses transcribed later, as long as the two here already are correct. 

AddSubClass( // this is the function you will be calling to add the variant

	"oracle", // Parent Class object name; Required; This has to be the exact name of the class of which you are adding a subclass. Look for the name of the class in the ClassList variable. For the default 12 classes these names are: "barbarian", "bard", "cleric", "druid", "fighter", "monk", "paladin", "ranger", "rogue", "sorcerer", "warlock", and "wizard"

	"destiny of the unhindered", // Object name; Required; The name the entry in the ClassSubList will have. This can be anything, it is just something that the sheet uses to reference the new entry and it will never be printed anywhere

	{ // don't forget this opening bracket

		regExpSearch : /^(?=.*destiny of the unhindered).*$/i, //required; regular expression of what to look for (i.e. now it looks for any entry that has both the words "special" and "me" in it, disregarding capitalization). If this looks too complicated, just write: /specialme/i

		subname : "Destiny of the Unhindered", //required; the name of the subclass

		source : ["HB:CDPW-O", 6], //required; the source and the page number.

		// after defining the above three, you don't need to define anything more, but you can. Defining more stuff will overwrite the entries as they are given in the ClassList. So if you do not need something to be different than the basics of the class (for example, you subclass uses the same spellcasting ability), then you don't need to define it again.
		// For the syntax of how to define more stuff, look at the ClassList (see "Homebrew Syntax - ClassList.js"). You can define all the same stuff in the same way. The below are a couple of examples:

		fullname : "Destiny of the Unhindered", //if no fullname is defined it will be automatically generated as "Class Name (Subclass name)". In this example that would be: "Oracle (Destiny of the Unhindered)"

		features : { //unlike the other entries, "features" will not delete all the features from the ClassList, but will add to the features in the ClassList. For this to work properly, the feature object has to be named "subclassfeatureX" and not something appropriate for the feature. 

			"subclassfeature3" : { // has to start with "subclassfeature" followed by a number. Note that the name has to be unique for this subclass, but it can be the same name as one of the features of the class in the ClassList variable. If you use the same name as a feature in the ClassList variable, it will be overwritten with this entry
				name : "Student of History",
				source : ["GMB:LL-S", 4],
				minlevel : 3,
				description : desc([
					"When you mark a creature as the target of your Adroit Analysis,",
					"you learn of either one language spoken by the creature, or of one of its special senses."
				]),
				languageProfs : [2],
				addMod : [
					{
						type : "skill",
						field : "History",
						mod : "Prof",
						text : "your proficiency bonus is doubled for History Checks"
					},
					{
						type : "skill",
						field : "Investigation",
						mod : "Prof",
						text : "your proficiency bonus is doubled for Investigation Checks"
					}
				], 
				skillstxt : "\n\n" + toUni("Archaeologist (Student of History)") + ": you gain proficiency in the History and Investigation skill, your proficiency bonus is doubled for any ability check you make with those skills; if already proficient, choose another skill of your choice from the savant skill list.",
				skills : ["History", "Investigation"],
			},
			"subclassfeature6" : {
				name : "Daring Determination",
				source : ["GMB:LL-S", 4],
				minlevel : 6,
				description : desc([
					"Can use Unyielding Mind for Dexterity checks and saving throws.",
					"1 minute examine object, can ascertain:",
					"approx monetary worth; civilization of origin; approx age.",
					"If the item has any innate magical properties, you learn of them",
					"as if you had cast the identify spell on the object.",
				]),
				savetxt : { // Optional; this attribute defines entries to add to the field for "Saving Throw Advantages / Disadvantages"
				text : ["Unyielding Mind(Dex)"], // Optional; this is an array of strings, and each of those strings is added to the field exactly as presented here
				},
			},

			"subclassfeature7" : {
				name : "Dungeoneer",
				source : ["GMB:LL-S", 4],
				minlevel : 7,
				description : desc([
					"My Adroit Analysis target has disadv. on opportunity attacks against me.",
					"My saves vs. traps negate damage on success and halve it on failure"
				]),
				savetxt : { text : ["save vs. traps: fail \u2015 half dmg, success \u2015 no dmg"] }
			},
			"subclassfeature13" : {
				name : "Lore Master",
				source : ["GMB:LL-S", 4],
				minlevel : 13,
				description : desc([
					"If you observe a place or object for at least one minute,",
					"you can recall information about it as if you had cast the legend lore spell.",
					"You can attune to 1 magic item that you don't meet the alignment, class, or race requirements for.",
					"This item counts towards your max attuned items."
				]),
				usages : 1,
				recovery : "short rest",
			},
			"subclassfeature17" : {
				name : "Lore Master",
				source : ["GMB:LL-S", 4],
				minlevel : 17,
				description : desc([
					"You are resistant to all damage from spells and other magical effects."
				]),
				dmgres : ["spells","magical effects"]
			},
		}
	}
);

AddSubClass( // this is the function you will be calling to add the variant

	"savant", // Parent Class object name; Required; This has to be the exact name of the class of which you are adding a subclass. Look for the name of the class in the ClassList variable. For the default 12 classes these names are: "barbarian", "bard", "cleric", "druid", "fighter", "monk", "paladin", "ranger", "rogue", "sorcerer", "warlock", and "wizard"

	"physician", // Object name; Required; The name the entry in the ClassSubList will have. This can be anything, it is just something that the sheet uses to reference the new entry and it will never be printed anywhere

	{ // don't forget this opening bracket

		regExpSearch : /^(?=.*physician).*$/i, //required; regular expression of what to look for (i.e. now it looks for any entry that has both the words "special" and "me" in it, disregarding capitalization). If this looks too complicated, just write: /specialme/i

		subname : "Physician", //required; the name of the subclass

		source : ["GMB:LL-S", 6], //required; the source and the page number. "HB" stands for homebrew. See the "Complete SourceList" for an overview of sources that are already defined. Or define a new source using the "Homebrew Syntax - SourceList.js". // This can be an array of arrays to indicate the things appears in multiple sources. For example, if something appears on page 7 of the Elemental Evil Player's Companion and on page 115 of the Sword Coast Adventure Guide, use the following: [["E", 7], ["S", 115]]

		// after defining the above three, you don't need to define anything more, but you can. Defining more stuff will overwrite the entries as they are given in the ClassList. So if you do not need something to be different than the basics of the class (for example, you subclass uses the same spellcasting ability), then you don't need to define it again.
		// For the syntax of how to define more stuff, look at the ClassList (see "Homebrew Syntax - ClassList.js"). You can define all the same stuff in the same way. The below are a couple of examples:

		fullname : "Physician", //if no fullname is defined it will be automatically generated as "Class Name (Subclass name)". In this example that would be: "MyClass (Path of SpecialMe)"

		//abilitySave : 6, //overwrites the abilitySave that was defined in the ClassList
		//abilitySaveAlt : 2,//overwrites the abilitySaveAlt that was defined in the ClassList
		//spellcastingFactor : 2, //overwrites the spellcastingFactor that was defined in the ClassList
		
		features : { //unlike the other entries, "features" will not delete all the features from the ClassList, but will add to the features in the ClassList. For this to work properly, the feature object has to be named "subclassfeatureX" and not something appropriate for the feature. The below are the features of the purple Dragon Knight

			"subclassfeature3" : { // has to start with "subclassfeature" followed by a number. Note that the name has to be unique for this subclass, but it can be the same name as one of the features of the class in the ClassList variable. If you use the same name as a feature in the ClassList variable, it will be overwritten with this entry
				name : "Student of Medicine",
				source : ["GMB:LL-S", 6],
				minlevel : 3,
				description : desc([
					"My studies allow me to use Medicine as an Intelligence-based skill.",
					"Gain prof in medicine and Herbalism kit, prof bonus is doubled for checks with those skills",
					"When I mark a creature with Adroit Analysis, I learn the creature's current hit points."
				]),
				addMod : [
					{
						type : "skill",
						field : "Medicine",
						mod : "Prof",
						text : "your proficiency bonus is doubled for Medicine Checks"
					},
					{
						type : "skill",
						field : "Too", // **note** is this correct? Wouldn't it be maybe tool or herb kit or something?
						mod : "Prof",
						text : "your proficiency bonus is doubled for Herbalism kit Checks"
					}
				], 
				skillstxt : "\n\n" + toUni("Physican (Student of Medicine)") + ": you gain proficiency in the Medicine skill and with the herbalism kit and your proficiency bonus is doubled for any ability check you make with those skills; if already proficient, choose another skill of your choice from the savant skill list.",
				skills : ["Medicine", "Too"],
				toolProfs : [["Herbalism kit", "Int"]],
				eval : 	function(){
						CurrentScriptFiles['Medicine (Int)'] = "/SkillsList.abilityScores[SkillsList.abbreviations.indexOf('Med')] = 'Int'; SkillsList.abilityScoresByAS[SkillsList.abbreviationsByAS.indexOf('Med')] = 'Int';/"
						SkillsList.abilityScores[SkillsList.abbreviations.indexOf('Med')] = 'Int';
						SkillsList.abilityScoresByAS[SkillsList.abbreviationsByAS.indexOf('Med')] = 'Int';
						SetRichTextFields(false, true);
					},
				removeeval : function(){
					delete CurrentScriptFiles['Medicine (Int)'];
					SkillsList.abilityScores[SkillsList.abbreviations.indexOf('Med')] = 'Wis';
					SkillsList.abilityScoresByAS[SkillsList.abbreviationsByAS.indexOf('Med')] = 'Wis';
					SetRichTextFields(false, true);
					}
			},
			"subclassfeature3.1" : { // has to start with "subclassfeature" followed by a number. Note that the name has to be unique for this subclass, but it can be the same name as one of the features of the class in the ClassList variable. If you use the same name as a feature in the ClassList variable, it will be overwritten with this entry
			name : "Combat Medic",
			source : ["GMB:LL-S", 6],
			minlevel : 3,
			description : desc([
				"I can use an action on my turn to do one of the following:",
				"Adrenaline Jolt; Dress Wounds; Healing Surge; Rending Strike; Stabilize.",
				"Details on the above actions can be found on the notes page"
				]),
			eval : function() {
				combtMedicActionsStr = 
					"Combat Medic Actions:"
					+"\n\u25C6 Adrenaline Jolt\nA creature I touch can immediately repeat a saving throw to end one of the following conditions affecting it: blinded, charmed, deafened, frightened, or poisoned, adding my Int mod (min. 1) to their roll."
					+"\n\u25C6 Dress Wounds\nI touch a creature and expend a use of Unyielding Mind, granting them temporary hit points equal to my Unyieldng Mind roll + my Int mod."
					+"\n\u25C6 Healing Surge\nA creature I touch can expend 1 of their Hit Dice to regain hit points equal to their Hit Die roll + their Con mod + my Int mod."
					+"\n\u25C6 Rending Strike\nMake a weapon attack. On hit, target takes normal damage of my attack and its movement is reduced by a number of feet equal to 5 times my Int mod until the start of my next turn."
					+"\n\u25C6 Stabilize\nI touch a living creature that has 0 hit points, automatically stabilizing them. The target can then choose to expend 1 of their Hit Dice to regain hit points equal to the maximum value of the Hit Die + their Con mod."
				
				AddString('Extra.Notes', combtMedicActionsStr, true);
				show3rdPageNotes();
				},
			removeeval : function() {
				combtMedicActionsStr = 
				"Combat Medic Actions:"
				+"\n\u25C6 Adrenaline Jolt\nA creature I touch can immediately repeat a saving throw to end one of the following conditions affecting it: blinded, charmed, deafened, frightened, or poisoned, adding my Int mod (min. 1) to their roll."
				+"\n\u25C6 Dress Wounds\nI touch a creature and expend a use of Unyielding Mind, granting them temporary hit points equal to my Unyieldng Mind roll + my Int mod."
				+"\n\u25C6 Healing Surge\nA creature I touch can expend 1 of their Hit Dice to regain hit points equal to their Hit Die roll + their Con mod + my Int mod."
				+"\n\u25C6 Rending Strike\nMake a weapon attack. On hit, target takes normal damage of my attack and its movement is reduced by a number of feet equal to 5 times my Int mod until the start of my next turn."
				+"\n\u25C6 Stabilize\nI touch a living creature that has 0 hit points, automatically stabilizing them. The target can then choose to expend 1 of their Hit Dice to regain hit points equal to the maximum value of the Hit Die + their Con mod."
				
				RemoveString('Extra.Notes', combtMedicActionsStr, true);
				},
			},

			"subclassfeature6" : {
				name : "Field Doctor",
				source : ["GMB:LL-S", 6],
				minlevel : 6,
				description : desc([
					"When I use my action to stabilize a creature, restore hit points,", 
					"or grant temporary hit points,", 
					"I gain the effects of the Dodge action until the start of my next turn.",
					"When I use my Combat Medic feature,",
					"I can make one weapon attack as a bonus action on that turn.",
				]),
				action : ["bonus action", "Weapon Attack (after Combat Medic Action)"]
			},

			"subclassfeature13" : {
				name : "Advanced Combat Medic",
				source : ["GMB:LL-S", 7],
				minlevel : 13,
				description : desc([
					"As an action, I touch a creature and use one of the following abilities:",
					"Regeneration; Restoration; Resuscitation.",
					"Details on the above actions can be found on the notes page.",
				]),
				eval : function() {
					advanceMedActionsStr = 
						"\nCombat Medic Actions (Advanced Combat Medic) [Int Mod x per long rest]"
            			+"\n\u25C6 Regeneration\nCreature regains hit points equal to four rolls of my Unyielding Mind die. If the creature has a severed body part, I can reattach it as apart of this action."
						+"\n\u25C6 Restoration\nI end one of the following conditions currently affecting it: blinded, charmed, deafened, frightened, poisoned, a reduction to an ability score or its hit point maximum, or I reduce its level of exhaustion by 1."
						+"\n\u25C6 Resuscitation\nIf the  creature that has died within the last minute, I return it to life with 1 hit point. I cannot bring back a creature that died of old age, nor can I restore any body parts the creature was missing."
					AddString('Extra.Notes', advanceMedActionsStr, true);
					show3rdPageNotes();
				},
				removeeval : function() {
					advanceMedActionsStr = 
						"\nCombat Medic Actions (Advanced Combat Medic) [Int Mod x per long rest]"
						+"\n\u25C6 Regeneration\nCreature regains hit points equal to four rolls of my Unyielding Mind die. If the creature has a severed body part, I can reattach it as apart of this action."
						+"\n\u25C6 Restoration\nI end one of the following conditions currently affecting it: blinded, charmed, deafened, frightened, poisoned, a reduction to an ability score or its hit point maximum, or I reduce its level of exhaustion by 1."
						+"\n\u25C6 Resuscitation\nIf the  creature that has died within the last minute, I return it to life with 1 hit point. I cannot bring back a creature that died of old age, nor can I restore any body parts the creature was missing."
					RemoveString('Extra.Notes', advanceMedActionsStr, true);
				},
				usages : "Intelligence modifier per",
				usagescalc : "event.value = Math.max(1, What('Int Mod'));",
				recover : "long rest"
			},

			"subclassfeature17" : {
				name : "Master Physician",
				source : ["GMB:LL", 7],
				minlevel : 15,
				description : desc([
					"Whenever I restore hit points or grant temporary hit points to a creature,",
					"it gains the maximum amount, in place of rolling.",
					"Any creature within 30 feet of me that expends Hit Dice,",
					"treats their Hit Dice as its maximum possible roll."
				])
			},
		}
	}
);

/* The following is just here to use as a backup reference to make sure that what I copied from the original file by hohouy is correct and that I'm on the right path.

AddSubClass("warlord", "daring gambler", {
	regExpSearch : /^(?=.*daring)(?=.*gambler).*$/i,
	subname : "Stratagem of the Daring Gambler",
	source : ["SE:W", 5],
	fullname : "Daring Gambler",
	features : {
		"subclassfeature3" : {
			name : "Daring Assault",
			source : ["SE:W", 5],
			minlevel : 3,
			description : "\n   " + "Allies within range can choose to take -5 on their attack rolls to do extra damage",
			additional : levels.map(function (n) {
				return n < 3 ? "" : "+" + (n < 15 ? 2 : 3) + "d6; " + (n < 10 ? "10 ft" : n < 20 ? "30 ft" : "60 ft");
			})
		},
		"subclassfeature7" : {
			name : "Desperate Avoidance",
			source : ["SE:W", 5],
			minlevel : 7,
			description : "\n" + "I can make a save with adv., but I get disadv. on attack rolls until my next turn ends",
			usages : 1,
			recovery : "short rest"
		},
		"subclassfeature11" : {
			name : "Hold The Line",
			source : ["SE:W", 5],
			minlevel : 11,
			description : desc([
				"Allies within range can choose to make a saving throw at disadvantage",
				"If the effect would normally do half damage on a successful save, it now does no damage"
			]),
			additional : levels.map(function (n) {
				return n < 11 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature15" : {
			name : "Risky Gambit",
			source : ["SE:W", 5],
			minlevel : 15,
			description : desc([
				"As a bonus action, I make a target in range provoke opportunity attacks from 1 creature",
				"If it does the attack, the attacker grants adv. on all attacks vs. it until it next turn starts"
			]),
			action : ["bonus action", ""],
			additional : levels.map(function (n) {
				return n < 15 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature18" : {
			name : "Lay the Trap",
			source : ["SE:W", 5],
			minlevel : 18,
			description : desc([
				"When a creature misses me with an attack while I'm conscious, I can attack it with ease",
				"One chosen creature and I gain adv. on our next attack vs. it before it next turn ends"
			])
		}
	}
});

AddSubClass("warlord", "golden general", {
	regExpSearch : /^(?=.*golden)(?=.*general).*$/i,
	subname : "Stratagem of the Golden General",
	source : ["SE:W", 5],
	fullname : "Golden General",
	features : {
		"subclassfeature3" : {
			name : "Inspiring Strike",
			source : ["SE:W", 5],
			minlevel : 3,
			description : desc([
				"Targets that I hit with a weapon attack are easier to hit until the start of my next turn",
				"The next attack roll against the target is made with advantage"
			])
		},
		"subclassfeature7" : {
			name : "Inspiring Presence",
			source : ["SE:W", 5],
			minlevel : 7,
			description : "\n   I gain proficiency in the Persuasion skill, or expertise if I already have proficiency",
			skills : [["Persuasion", "increment"]]
		},
		"subclassfeature11" : {
			name : "Glorious Sacrifice",
			source : ["SE:W", 5],
			minlevel : 11,
			description : desc([
				"If both me and creatures within range must make the same save, I can grant them adv.",
				"By doing so, I make my saving throw with disadvantage"
			]),
			additional : levels.map(function (n) {
				return n < 11 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature15" : {
			name : "Portentous Escape",
			source : ["SE:W", 5],
			minlevel : 15,
			description : desc([
				"When I succeed on a save, I can choose an ally within 60 ft that can see and hear me",
				"That ally gains temporary HP equal to 5 + my Charisma modifier"
			])
		},
		"subclassfeature18" : {
			name : "Rally the Troops",
			source : ["SE:W", 6],
			minlevel : 18,
			description : desc([
				"As an action, I can heal one creature that currently has an unused battle command die",
				"The target regains HP equal to two rolls of the battle command die + my Charisma mod"
			]),
			action : [["action", ""]]
		}
	}
});

AddSubClass("warlord", "hordemaster", {
	regExpSearch : /^(?=.*hordemaster).*$/i,
	subname : "Stratagem of the Hordemaster",
	source : ["SE:W", 6],
	fullname : "Hordemaster",
	features : {
		"subclassfeature3" : {
			name : "Make Haste",
			source : ["SE:W", 6],
			minlevel : 3,
			description : "\n   Allies starting there turn within range gain +5 ft speed until the end of their turn",
			additional : levels.map(function (n) {
				return n < 3 ? "" : n < 10 ? "10 ft" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature3.1" : {
			name : "Skirmisher",
			source : ["SE:W", 6],
			minlevel : 3,
			description : desc([
				"I gain bonus speed while I'm wearing light armor, no armor, and not wearing a shield",
				"Opportunity attacks I provoke by moving have disadvantage"
			]),
			additional : levels.map(function (n) {
				return n < 3 ? "" : n < 15 ? "+10 ft" : "+20 ft";
			}),
			changeeval : function (v) {
				var addSpd = v[1] < 3 ? 0 : v[1] < 15 ? "+10" : "+20";
				SetProf('speed', addSpd !== 0, {allModes : addSpd}, "Hordemaster: Skirmisher");
			}
		},
		"subclassfeature7" : {
			name : "Nimble Troops",
			source : ["SE:W", 6],
			minlevel : 7,
			description : "\n   Creatures within range add my Charisma modifier to Athletics and Acrobatics checks",
			additional : levels.map(function (n) {
				return n < 7 ? "" : n < 10 ? "10 ft" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature11" : {
			name : "Hit-and-Run",
			source : ["SE:W", 6],
			minlevel : 11,
			description : "\n   Using a battle command die granted by me also gains +10 ft speed until its turn ends"
		},
		"subclassfeature15" : {
			name : "Seize Advantage",
			source : ["SE:W", 6],
			minlevel : 15,
			description : desc([
				"When a creature misses an opportunity attacks against me or an ally within range,",
				"the next attack against the creature before the end of its next turn has advantage"
			]),
			additional : levels.map(function (n) {
				return n < 15 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		},
		"subclassfeature18" : {
			name : "Unbound Horde",
			source : ["SE:W", 6],
			minlevel : 18,
			description : desc([
				"Opportunity attacks against my allies within range are made with disadvantage",
				"When I move on my turn, allies within range can use their reaction to move up to 10 ft",
				"They can't move if their speed is currently less than 10 ft"
			]),
			additional : levels.map(function (n) {
				return n < 18 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		}
	}
});

AddSubClass("warlord", "resourceful leader", {
	regExpSearch : /^(?=.*resourceful)(?=.*leader).*$/i,
	subname : "Stratagem of the Resourceful Leader",
	source : ["SE:W", 6],
	fullname : "Resourceful Leader",
	features : {
		"subclassfeature3" : {
			name : "Find A Way",
			source : ["SE:W", 6],
			minlevel : 3,
			description : desc([
				"When an ally in 60 ft with a battle command die granted by me misses an attack,",
				"I can use my reaction to expend the battle command die on its behalf",
				"By doing so, the miss automatically becomes a hit, but the attack only deals half damage"
			]),
			action : [["reaction", ""]]
		},
		"subclassfeature3.1" : {
			name : "Shifting Resources",
			source : ["SE:W", 6],
			minlevel : 3,
			description : desc([
				"As a bonus action, I can move a battle command die from a target to another",
				"Both targets must be within range, and the recipient must be able to hear me"
			]),
			additional : levels.map(function (n) {
				return n < 10 ? "10 ft" : n < 20 ? "30 ft" : "60 ft";
			}),
			action : [["bonus action", ""]]
		},
		"subclassfeature7" : {
			name : "Trick up your Sleeve",
			source : ["SE:W", 7],
			minlevel : 7,
			description : "\n   I can add my proficiency bonus (an extra time) to one ability check, attack roll, or save",
			usages : 1,
			recovery : "short rest"
		},
		"subclassfeature11" : {
			name : "Close Call",
			source : ["SE:W", 7],
			minlevel : 11,
			description : "\n   When I would fail a check or save, I can add a die to the total, but only once per minute",
			usages : 1,
			recovery : "1 min",
			additional : levels.map(function (n) {
				return n < 11 ? "" : n < 13 ? "d8" : n < 17 ? "d10" : "d12";
			})
		},
		"subclassfeature15" : {
			name : "Timely Warning",
			source : ["SE:W", 7],
			minlevel : 15,
			description : desc([
				"My battle command die can also be used to increase AC when the target of an attack",
				"When this increase would cause the attack to miss, the die is not expended"
			])
		},
		"subclassfeature18" : {
			name : "Hidden Resources",
			source : ["SE:W", 7],
			minlevel : 18,
			description : desc([
				"As a bonus action, I can allow a creature regain a use of a class or racial feature",
				"This feature can only be regained if it would normally be regained by a short rest"
			]),
			usages : 2,
			recovery : "long rest",
			action : [["bonus action",""]]
		}
	}
});
// >>
AddSubClass("warlord", "shrewd commander", {
	regExpSearch : /^(?=.*shrewd)(?=.*commander).*$/i,
	subname : "Stratagem of the Shrewd Commander",
	source : ["SE:W", 7],
	fullname : "Shrewd Commander",
	features : {
		"subclassfeature3" : {
			name : "The Weakest Link",
			source : ["SE:W", 7],
			minlevel : 3,
			description : desc([
				"As a bonus action when I hit an attack, I can mark the target until my next turn starts",
				"My allies in range add half my Cha mod (min 1) to attack rolls vs. the marked target"
			]),
			action : [["bonus action", ""]]
		},
		"subclassfeature7" : {
			name : "Attention to Detail",
			source : ["SE:W", 7],
			minlevel : 7,
			description : "\n   Three times per long rest I can make an ability check with advantage",
			usages : 3,
			recovery : "long rest"
		},
		"subclassfeature11" : {
			name : "Commander's Cunning",
			source : ["SE:W", 7],
			minlevel : 11,
			description : desc([
				"As a reaction when a creature with an unused battle command die from me is attacked,",
				"I can expend that die to impose disadvantage on the triggering attack roll"
			]),
			action : [["reaction", ""]]
		},
		"subclassfeature15" : {
			name : "Exploit the Advantage",
			source : ["SE:W", 8],
			minlevel : 15,
			description : "\n   When an ally attacks a target marked by me, those attacks do an extra +1d6 damage"
		},
		"subclassfeature18" : {
			name : "No Room for Failure",
			source : ["SE:W", 7],
			minlevel : 18,
			description : desc([
				"If an ally within range that has an unused battle command die from me drops to 0 HP,",
				"it can expend the die to regain HP equal to two rolls of the die + my Charisma modifier"
			]),
			additional : levels.map(function (n) {
				return n < 18 ? "" : n < 20 ? "30 ft" : "60 ft";
			})
		}
	}
});

AddSubClass("warlord", "supreme tactician", {
	regExpSearch : /^(?=.*supreme)(?=.*tactician).*$/i,
	subname : "Stratagem of the Supreme Tactician",
	source : ["SE:W", 8],
	fullname : "Supreme Tactician",
	features : {
		"subclassfeature3" : {
			name : "Tactical Edge",
			source : ["SE:W", 8],
			minlevel : 3,
			description : desc([
				"When my turn starts, I gain a tactics die (d4) and increase the dice I have by one step",
				"A die increases from a d4 to a d6, to a d8, to a d10, and finally to a d12",
				"Any ally within 60 ft that can hear me can expend a die and add it to one attack roll"
			]),
			additional : levels.map( function(n) {
				return n < 3 ? "" : n < 15 ? "max 1 die" : "max 2 dice";
			})
		},
		"subclassfeature7" : {
			name : "Student of History",
			source : ["SE:W", 8],
			minlevel : 7,
			description : "\n   I gain proficiency and expertise in the History skill",
			skills : [["History", "full"]]
		},
		"subclassfeature11" : {
			name : "Indomitable Offense",
			source : ["SE:W", 8],
			minlevel : 11,
			description : desc([
				"When someone uses one a combat dice I gave them, they gain a bonus to their AC",
				"This bonus equals half the result of the die roll and lasts until the end of my next turn"
			])
		},
		"subclassfeature15" : {
			name : "Superior Tactics",
			source : ["SE:W", 8],
			minlevel : 15,
			description : "\n   I can have two tactics dice at the same time"
		},
		"subclassfeature18" : {
			name : "Master Tactician",
			source : ["SE:W", 8],
			minlevel : 18,
